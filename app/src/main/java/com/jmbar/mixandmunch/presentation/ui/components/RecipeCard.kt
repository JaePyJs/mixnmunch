package com.jmbar.mixandmunch.presentation.ui.components

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Star
import androidx.compose.material3.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport coil.compose.AsyncImage\nimport com.jmbar.mixandmunch.domain.model.RecipeSource\nimport com.jmbar.mixandmunch.domain.model.RecipeSummary\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun RecipeCard(\n    recipeSummary: RecipeSummary,\n    onClick: () -> Unit,\n    modifier: Modifier = Modifier\n) {\n    Card(\n        onClick = onClick,\n        modifier = modifier.fillMaxWidth(),\n        shape = RoundedCornerShape(12.dp),\n        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)\n    ) {\n        Column {\n            // Recipe Image\n            AsyncImage(\n                model = recipeSummary.imageUrl,\n                contentDescription = recipeSummary.title,\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .height(180.dp)\n                    .clip(RoundedCornerShape(topStart = 12.dp, topEnd = 12.dp)),\n                contentScale = ContentScale.Crop\n            )\n            \n            Column(\n                modifier = Modifier.padding(16.dp)\n            ) {\n                // Title\n                Text(\n                    text = recipeSummary.title,\n                    style = MaterialTheme.typography.titleMedium,\n                    fontWeight = FontWeight.Medium,\n                    maxLines = 2,\n                    overflow = TextOverflow.Ellipsis\n                )\n                \n                Spacer(modifier = Modifier.height(8.dp))\n                \n                // Badges Row\n                Row(\n                    horizontalArrangement = Arrangement.spacedBy(8.dp),\n                    verticalAlignment = Alignment.CenterVertically\n                ) {\n                    // Source Badge\n                    when (recipeSummary.source) {\n                        is RecipeSource.TheMealDB -> {\n                            AssistChip(\n                                onClick = { },\n                                label = { Text(\"Sourced\", style = MaterialTheme.typography.labelSmall) },\n                                colors = AssistChipDefaults.assistChipColors(\n                                    containerColor = MaterialTheme.colorScheme.primaryContainer\n                                )\n                            )\n                        }\n                        is RecipeSource.AI -> {\n                            AssistChip(\n                                onClick = { },\n                                label = { Text(\"AI-Generated\", style = MaterialTheme.typography.labelSmall) },\n                                colors = AssistChipDefaults.assistChipColors(\n                                    containerColor = MaterialTheme.colorScheme.secondaryContainer\n                                )\n                            )\n                        }\n                    }\n                    \n                    // Match Type Badge\n                    if (recipeSummary.matchInfo.isExactMatch) {\n                        AssistChip(\n                            onClick = { },\n                            label = { Text(\"Exact\", style = MaterialTheme.typography.labelSmall) },\n                            colors = AssistChipDefaults.assistChipColors(\n                                containerColor = MaterialTheme.colorScheme.tertiaryContainer\n                            )\n                        )\n                    } else {\n                        AssistChip(\n                            onClick = { },\n                            label = { Text(\"Partial\", style = MaterialTheme.typography.labelSmall) },\n                            colors = AssistChipDefaults.assistChipColors(\n                                containerColor = MaterialTheme.colorScheme.surfaceVariant\n                            )\n                        )\n                    }\n                    \n                    // Filipino Badge\n                    if (recipeSummary.matchInfo.isFilipino) {\n                        Icon(\n                            Icons.Default.Star,\n                            contentDescription = \"Filipino\",\n                            tint = MaterialTheme.colorScheme.primary,\n                            modifier = Modifier.size(16.dp)\n                        )\n                    }\n                }\n                \n                Spacer(modifier = Modifier.height(8.dp))\n                \n                // Match Info\n                Row(\n                    modifier = Modifier.fillMaxWidth(),\n                    horizontalArrangement = Arrangement.SpaceBetween,\n                    verticalAlignment = Alignment.Bottom\n                ) {\n                    Column {\n                        Text(\n                            text = \"Matched: ${recipeSummary.matchInfo.matchedIngredients.size} ingredients\",\n                            style = MaterialTheme.typography.bodySmall,\n                            color = MaterialTheme.colorScheme.onSurfaceVariant\n                        )\n                        \n                        if (recipeSummary.matchInfo.missingIngredients.isNotEmpty()) {\n                            Text(\n                                text = \"Missing: ${recipeSummary.matchInfo.missingIngredients.joinToString(\", \")}\",\n                                style = MaterialTheme.typography.bodySmall,\n                                color = MaterialTheme.colorScheme.error,\n                                maxLines = 1,\n                                overflow = TextOverflow.Ellipsis\n                            )\n                        }\n                    }\n                    \n                    // Score\n                    Text(\n                        text = \"Score: ${\"%.1f\".format(recipeSummary.matchInfo.score)}\",\n                        style = MaterialTheme.typography.labelSmall,\n                        color = MaterialTheme.colorScheme.primary,\n                        fontWeight = FontWeight.Medium\n                    )\n                }\n            }\n        }\n    }\n}